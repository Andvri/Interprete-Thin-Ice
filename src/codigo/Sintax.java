
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 09 10:40:20 CEST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import arbol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 09 10:40:20 CEST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\010\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\007\000\002\010\005\000\002\010\005\000\002\010" +
    "\010\000\002\027\006\000\002\027\005\000\002\011\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\004\000\002\017\006\000\002\012\005\000\002" +
    "\012\006\000\002\012\003\000\002\012\004\000\002\005" +
    "\005\000\002\005\003\000\002\016\005\000\002\016\003" +
    "\000\002\015\005\000\002\015\003\000\002\023\005\000" +
    "\002\023\003\000\002\022\005\000\002\022\003\000\002" +
    "\024\011\000\002\024\015\000\002\025\015\000\002\026" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\004\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\011\011\001\002\000" +
    "\020\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff" +
    "\043\uffff\001\002\000\020\012\026\013\023\014\017\015" +
    "\021\017\015\020\020\043\027\001\002\000\024\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\043" +
    "\ufff8\044\ufff8\001\002\000\024\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\017\ufff9\020\ufff9\021\ufff9\043\ufff9\044\ufff9\001" +
    "\002\000\004\007\147\001\002\000\024\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\017\ufffa\020\ufffa\021\ufffa\043\ufffa\044" +
    "\ufffa\001\002\000\004\043\uffea\001\002\000\020\013\uffff" +
    "\014\uffff\015\uffff\017\uffff\020\uffff\021\uffff\043\uffff\001" +
    "\002\000\004\007\130\001\002\000\024\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\043\ufffe\044" +
    "\ufffe\001\002\000\004\043\uffeb\001\002\000\026\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\021\ufffd\023" +
    "\126\043\ufffd\044\ufffd\001\002\000\024\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\017\ufffc\020\ufffc\021\ufffc\043\ufffc\044" +
    "\ufffc\001\002\000\004\002\000\001\002\000\010\005\113" +
    "\007\112\023\114\001\002\000\024\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\043\ufffb\044\ufffb" +
    "\001\002\000\004\043\032\001\002\000\030\005\033\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\023\uffe9\043\uffe9\044\uffe9\001\002\000\016\007\036\025" +
    "\045\041\042\043\041\045\043\046\037\001\002\000\060" +
    "\006\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\024\uffd7\025\uffd7\026\060\027\057" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\043\uffd7\044\uffd7\001\002\000\062\006\uffd3" +
    "\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\043\uffd3\044\uffd3\001\002\000\016\007\036" +
    "\025\045\041\042\043\041\045\043\046\037\001\002\000" +
    "\062\006\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\001\002\000" +
    "\062\006\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\017\uffda\020\uffda\021\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\043\uffda\044\uffda\001\002\000" +
    "\064\005\105\006\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\017\uffdf\020\uffdf\021\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf\001" +
    "\002\000\014\007\063\025\045\043\041\045\043\046\037" +
    "\001\002\000\062\006\uffe0\010\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0" +
    "\001\002\000\010\006\053\024\055\025\054\001\002\000" +
    "\004\045\051\001\002\000\062\006\uffd5\010\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\047\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\043" +
    "\uffd5\044\uffd5\001\002\000\016\007\036\025\045\041\042" +
    "\043\041\045\043\046\037\001\002\000\062\006\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\043\uffd4\044\uffd4\001\002\000\062\006\uffde\010" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde" +
    "\021\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\043\uffde\044\uffde\001\002\000\016\007\036\025" +
    "\045\041\042\043\041\045\043\046\037\001\002\000\026" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\023\uffe8\043\uffe8\044\uffe8\001\002\000\016\007\uffee" +
    "\025\uffee\041\uffee\043\uffee\045\uffee\046\uffee\001\002\000" +
    "\016\007\uffef\025\uffef\041\uffef\043\uffef\045\uffef\046\uffef" +
    "\001\002\000\060\006\uffd8\010\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\017\uffd8\020\uffd8\021\uffd8\024\uffd8\025\uffd8" +
    "\026\060\027\057\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\043\uffd8\044\uffd8\001\002" +
    "\000\016\007\uffec\025\uffec\041\uffec\043\uffec\045\uffec\046" +
    "\uffec\001\002\000\016\007\uffed\025\uffed\041\uffed\043\uffed" +
    "\045\uffed\046\uffed\001\002\000\016\007\036\025\045\041" +
    "\042\043\041\045\043\046\037\001\002\000\062\006\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\047" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\043\uffd6\044\uffd6\001\002\000\016\007\036" +
    "\025\045\041\042\043\041\045\043\046\037\001\002\000" +
    "\062\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\043\uffd9\044\uffd9\001\002\000" +
    "\010\010\103\037\102\040\100\001\002\000\032\010\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\037\uffcf\040\uffcf\043\uffcf\044\uffcf\001\002\000\052" +
    "\010\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\024\055\025\054\031\073\032\070\033\075" +
    "\034\072\035\076\036\071\037\uffd1\040\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\016\007\ufff4\025\ufff4\041\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\001\002\000\016\007\ufff2\025\ufff2\041" +
    "\ufff2\043\ufff2\045\ufff2\046\ufff2\001\002\000\016\007\ufff6" +
    "\025\ufff6\041\ufff6\043\ufff6\045\ufff6\046\ufff6\001\002\000" +
    "\016\007\ufff5\025\ufff5\041\ufff5\043\ufff5\045\ufff5\046\ufff5" +
    "\001\002\000\016\007\036\025\045\041\042\043\041\045" +
    "\043\046\037\001\002\000\016\007\ufff7\025\ufff7\041\ufff7" +
    "\043\ufff7\045\ufff7\046\ufff7\001\002\000\016\007\ufff3\025" +
    "\ufff3\041\ufff3\043\ufff3\045\ufff3\046\ufff3\001\002\000\036" +
    "\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\024\055\025\054\037\uffd2\040\uffd2\043\uffd2" +
    "\044\uffd2\001\002\000\016\007\ufff0\025\ufff0\041\ufff0\043" +
    "\ufff0\045\ufff0\046\ufff0\001\002\000\016\007\036\025\045" +
    "\041\042\043\041\045\043\046\037\001\002\000\016\007" +
    "\ufff1\025\ufff1\041\ufff1\043\ufff1\045\ufff1\046\ufff1\001\002" +
    "\000\062\006\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb\044\uffdb\001\002" +
    "\000\032\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\037\uffd0\040\uffd0\043\uffd0\044\uffd0" +
    "\001\002\000\016\007\036\025\045\041\042\043\041\045" +
    "\043\046\037\001\002\000\010\006\107\024\055\025\054" +
    "\001\002\000\062\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\017\uffdd\020\uffdd\021\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd" +
    "\001\002\000\010\010\111\037\102\040\100\001\002\000" +
    "\062\006\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\043\uffdc\044\uffdc\001\002\000" +
    "\020\007\036\010\123\025\045\041\042\043\041\045\043" +
    "\046\037\001\002\000\016\007\036\025\045\041\042\043" +
    "\041\045\043\046\037\001\002\000\016\007\036\025\045" +
    "\041\042\043\041\045\043\046\037\001\002\000\024\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\043\uffe6\044\uffe6\001\002\000\032\010\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2\037\102" +
    "\040\100\043\uffe2\044\uffe2\001\002\000\010\006\120\024" +
    "\055\025\054\001\002\000\004\023\121\001\002\000\016" +
    "\007\036\025\045\041\042\043\041\045\043\046\037\001" +
    "\002\000\024\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\043\uffe5\044\uffe5\001\002\000\024\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\043\uffe3\044\uffe3\001\002\000\004\010\125\001\002\000" +
    "\024\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\043\uffe4\044\uffe4\001\002\000\016\007\036\025" +
    "\045\041\042\043\041\045\043\046\037\001\002\000\024" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\043\uffe7\044\uffe7\001\002\000\016\007\036\025\045" +
    "\041\042\043\041\045\043\046\037\001\002\000\010\010" +
    "\132\037\102\040\100\001\002\000\004\011\133\001\002" +
    "\000\020\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020" +
    "\uffff\043\uffff\001\002\000\020\012\135\013\023\014\017" +
    "\015\021\017\015\020\020\043\027\001\002\000\026\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\136\017\uffce\020\uffce" +
    "\021\uffce\043\uffce\044\uffce\001\002\000\004\011\137\001" +
    "\002\000\020\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff" +
    "\020\uffff\043\uffff\001\002\000\020\012\141\013\023\014" +
    "\017\015\021\017\015\020\020\043\027\001\002\000\024" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\043\uffcd\044\uffcd\001\002\000\020\013\023\014\017" +
    "\015\021\017\015\020\020\021\143\043\027\001\002\000" +
    "\004\022\144\001\002\000\016\007\036\025\045\041\042" +
    "\043\041\045\043\046\037\001\002\000\010\037\102\040" +
    "\100\044\146\001\002\000\024\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\017\uffcb\020\uffcb\021\uffcb\043\uffcb\044\uffcb\001" +
    "\002\000\020\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff" +
    "\043\uffff\044\uffff\001\002\000\020\013\023\014\017\015" +
    "\021\017\015\020\020\043\027\044\151\001\002\000\020" +
    "\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff\043\uffff\044" +
    "\uffff\001\002\000\020\013\023\014\017\015\021\017\015" +
    "\020\020\043\027\044\153\001\002\000\016\007\036\025" +
    "\045\041\042\043\041\045\043\046\037\001\002\000\010" +
    "\010\155\037\102\040\100\001\002\000\004\011\156\001" +
    "\002\000\020\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff" +
    "\020\uffff\043\uffff\001\002\000\020\012\160\013\023\014" +
    "\017\015\021\017\015\020\020\043\027\001\002\000\024" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\043\uffcc\044\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\011\001\001\000\022\004\021\006" +
    "\030\007\023\010\024\024\015\025\013\026\012\027\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\043\012\034\015\045\016\033" +
    "\017\037\001\001\000\004\014\060\001\001\000\002\001" +
    "\001\000\020\005\066\012\034\015\045\016\033\017\037" +
    "\022\107\023\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\063\001\001\000\002" +
    "\001\001\000\004\013\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\047\017\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\034\015\045\016" +
    "\055\017\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\034\015\061\017\037" +
    "\001\001\000\002\001\001\000\020\005\066\012\034\015" +
    "\045\016\033\017\037\022\064\023\065\001\001\000\002" +
    "\001\001\000\004\021\100\001\001\000\002\001\001\000" +
    "\006\013\051\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\076\012\034\015\045\016\033\017\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\051\001\001\000" +
    "\002\001\001\000\016\005\066\012\034\015\045\016\033" +
    "\017\037\023\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\105\012\034\015\045" +
    "\016\033\017\037\001\001\000\004\013\051\001\001\000" +
    "\002\001\001\000\004\021\100\001\001\000\002\001\001" +
    "\000\022\005\066\011\123\012\034\015\045\016\033\017" +
    "\037\022\115\023\065\001\001\000\014\005\116\012\034" +
    "\015\045\016\033\017\037\001\001\000\022\005\066\011" +
    "\114\012\034\015\045\016\033\017\037\022\115\023\065" +
    "\001\001\000\002\001\001\000\004\021\100\001\001\000" +
    "\004\013\051\001\001\000\002\001\001\000\022\005\066" +
    "\011\121\012\034\015\045\016\033\017\037\022\115\023" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\066\011\126\012" +
    "\034\015\045\016\033\017\037\022\115\023\065\001\001" +
    "\000\002\001\001\000\020\005\066\012\034\015\045\016" +
    "\033\017\037\022\130\023\065\001\001\000\004\021\100" +
    "\001\001\000\002\001\001\000\004\003\133\001\001\000" +
    "\022\004\021\006\030\007\023\010\024\024\015\025\013" +
    "\026\012\027\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\137\001\001\000\022\004\021\006\030" +
    "\007\023\010\024\024\015\025\013\026\012\027\027\001" +
    "\001\000\002\001\001\000\022\004\021\006\030\007\023" +
    "\010\024\024\015\025\013\026\012\027\027\001\001\000" +
    "\002\001\001\000\020\005\066\012\034\015\045\016\033" +
    "\017\037\022\144\023\065\001\001\000\004\021\100\001" +
    "\001\000\002\001\001\000\004\003\147\001\001\000\022" +
    "\004\021\006\030\007\023\010\024\024\015\025\013\026" +
    "\012\027\027\001\001\000\004\003\151\001\001\000\022" +
    "\004\021\006\030\007\023\010\024\024\015\025\013\026" +
    "\012\027\027\001\001\000\020\005\066\012\034\015\045" +
    "\016\033\017\037\022\153\023\065\001\001\000\004\021" +
    "\100\001\001\000\002\001\001\000\004\003\156\001\001" +
    "\000\022\004\021\006\030\007\023\010\024\024\015\025" +
    "\013\026\012\027\027\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    private NodoBase nodoBase=null;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    
    public NodoBase getNodoBase(){
        return nodoBase;
    }

    public void setNodoBase(NodoBase nodoBase){
        this.nodoBase = nodoBase;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CICLO_REPITA_HASTA_QUE ::= Repita SEGMENTO Hasta Que OPERACION_LOGICA Punto_coma 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = new NodoRepita((NodoBase) cond, (NodoBase) seg);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_REPITA_HASTA_QUE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CICLO_PARA ::= Para Parentesis_a SEGMENTO Punto_coma SEGMENTO Punto_coma OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;
		int inicleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int pasoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int pasoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object paso = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int verifleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int verifright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object verif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int segleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT= new NodoPara((NodoBase) inic, (NodoBase) paso, (NodoBase) verif, (NodoBase) seg); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDICIONAL_SI ::= Si Parentesis_a OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c Sino Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int segleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int segSiNoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int segSiNoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object segSiNo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = new NodoSi((NodoBase) cond,(NodoBase) seg,(NodoBase) segSiNo);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONAL_SI ::= Si Parentesis_a OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int segleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = new NodoSi((NodoBase) cond,(NodoBase) seg);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERACION_LOGICA ::= OPERACION_RELACIONAL 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= oper; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERACION_LOGICA ::= OPERACION_LOGICA OPERADOR_LOGICO OPERACION_RELACIONAL 
            {
              Object RESULT =null;
		int operIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.logico); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERACION_RELACIONAL ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= oper; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERACION_RELACIONAL ::= OPERACION_ARITMETICA OPERADOR_RELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int operIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.logico); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_MOD ::= FACTOR 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= fact; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_MOD ::= OPERACION_MOD Modulo FACTOR 
            {
              Object RESULT =null;
		int operIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoOperacion((NodoBase) operI, Tokens.Modulo, (NodoBase) operD, TiposIds.entero); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TERM ::= OPERACION_MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= mod; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TERM ::= TERM OPERADOR_MULT OPERACION_MOD 
            {
              Object RESULT =null;
		int operIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.entero); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_ARITMETICA ::= TERM 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= term; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA OPERADOR_SUMA TERM 
            {
              Object RESULT =null;
		int operIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int operIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object operI = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.entero); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= Negacion_logica ELEMENTO 
            {
              Object RESULT =null;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoOperacion(Tokens.Negacion_logica, (NodoBase) operD, TiposIds.logico); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= ELEMENTO 
            {
              Object RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= elem; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= Negacion_logica Parentesis_a OPERACION_LOGICA Parentesis_c 
            {
              Object RESULT =null;
		int operDleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operDright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operD = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT= new NodoOperacion(Tokens.Negacion_logica, (NodoBase) operD, TiposIds.logico); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= Parentesis_a OPERACION_LOGICA Parentesis_c 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT= oper; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO ::= Identificador Corchete_a OPERACION_ARITMETICA Corchete_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT= new NodoIdentificador(id.toString(), (NodoBase) op); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO ::= Resta Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoNumero("-" + num.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTO ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoIdentificador(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELEMENTO ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoNumero(num.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELEMENTO ::= Booleano 
            {
              Object RESULT =null;
		int boolvleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int boolvright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object boolv = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoBooleano(boolv.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= OPERACION_LOGICA 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=oper; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= Identificador Parentesis_a Parentesis_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 RESULT = new NodoFuncion(id.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= Identificador Parentesis_a OPERACION Parentesis_c 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int parmleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int parmright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object parm = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = new NodoFuncion(id.toString(), (NodoBase) parm); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AS_VARIABLE ::= Identificador Corchete_a OPERACION_ARITMETICA Corchete_c Asignacion OPERACION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int indiceleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int indiceright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object indice = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoAsignacion(id.toString(), (NodoBase) asig, (NodoBase) indice); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AS_VARIABLE ::= Identificador Asignacion OPERACION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoAsignacion(id.toString(), (NodoBase) asig); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AS_VARIABLE ::= DEFINICION_VARIABLE Asignacion OPERACION 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    NodoAsignacion nodo = new NodoAsignacion(((NodoDefinicion)def).getIdentificador(), (NodoBase) asig);
                    ((NodoDefinicion)def).setHermanoD(nodo);
                    RESULT= (NodoDefinicion)def;
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFINICION_VARIABLE ::= TIPO_VARIABLE Identificador Corchete_a OPERACION_ARITMETICA Corchete_c 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT= new NodoDefinicion(id.toString(), (TiposIds) tipo, (NodoBase) oper); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICION_VARIABLE ::= TIPO_VARIABLE Identificador 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= new NodoDefinicion(id.toString(), (TiposIds) tipo); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_VARIABLE ::= Logico 
            {
              Object RESULT =null;
		int logicoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int logicoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object logico = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=TiposIds.logico; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_VARIABLE ::= Entero 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=TiposIds.entero; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERADOR_MULT ::= Division 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Division; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_MULT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERADOR_MULT ::= Multiplicacion 
            {
              Object RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mult = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Multiplicacion; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_MULT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADOR_SUMA ::= Resta 
            {
              Object RESULT =null;
		int restleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rest = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Resta; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_SUMA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADOR_SUMA ::= Suma 
            {
              Object RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Suma; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_SUMA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERADOR_LOGICO ::= O_logico 
            {
              Object RESULT =null;
		int o_logleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int o_logright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o_log = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.O_logico; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERADOR_LOGICO ::= Y_logico 
            {
              Object RESULT =null;
		int y_logleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int y_logright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object y_log = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Y_logico; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERADOR_RELACIONAL ::= Diferencia 
            {
              Object RESULT =null;
		int difleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int difright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Diferencia; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERADOR_RELACIONAL ::= Igual 
            {
              Object RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Igual; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERADOR_RELACIONAL ::= Menor_igual 
            {
              Object RESULT =null;
		int menor_ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int menor_iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object menor_i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Menor_igual; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADOR_RELACIONAL ::= Menor 
            {
              Object RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Menor; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADOR_RELACIONAL ::= Mayor_igual 
            {
              Object RESULT =null;
		int mayor_ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mayor_iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mayor_i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Mayor_igual; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADOR_RELACIONAL ::= Mayor 
            {
              Object RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mayor = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=Tokens.Mayor; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= CICLO_REPITA_HASTA_QUE 
            {
              Object RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int repright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rep = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=rep; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= CICLO_PARA 
            {
              Object RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=para; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= CONDICIONAL_SI 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=si; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=func; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= AS_VARIABLE 
            {
              Object RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object asig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=asig; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DEFINICION_VARIABLE 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=def; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SEGMENTO ::= SEGMENTO SENTENCIA 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    NodoBase hijo = (NodoBase) seg;
    if(hijo !=null){
        while(!hijo.withoutHermanoD()){
            hijo = hijo.getHermanoD();
        }
        hijo.setHermanoD((NodoBase) sent);
        RESULT=seg;
    }else{
        RESULT=sent;
    }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SEGMENTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Programa Parentesis_a Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;
		int segleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int segright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object seg = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    NodoPrograma nodo = new NodoPrograma((NodoBase) seg);
    this.parser.setNodoBase(nodo); 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

