
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 05 22:21:08 CEST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 05 22:21:08 CEST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\010\000\002\003" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\003\000\002\020\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\004\000\002\006\007\000\002" +
    "\007\005\000\002\007\005\000\002\007\010\000\002\010" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\006\000\002\011\005\000\002\011\006\000" +
    "\002\011\003\000\002\011\004\000\002\004\005\000\002" +
    "\004\003\000\002\015\005\000\002\015\003\000\002\014" +
    "\005\000\002\014\003\000\002\022\005\000\002\022\003" +
    "\000\002\021\005\000\002\021\003\000\002\023\011\000" +
    "\002\023\015\000\002\024\015\000\002\025\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\004\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\011\011\001\002\000" +
    "\020\012\uffff\013\022\014\016\015\020\017\014\020\017" +
    "\043\024\001\002\000\022\012\uffff\013\022\014\016\015" +
    "\020\017\014\020\017\021\uffff\043\024\001\002\000\022" +
    "\012\uffff\013\022\014\016\015\020\017\014\020\017\021" +
    "\uffff\043\024\001\002\000\004\007\145\001\002\000\022" +
    "\012\uffff\013\022\014\016\015\020\017\014\020\017\021" +
    "\uffff\043\024\001\002\000\004\043\uffeb\001\002\000\020" +
    "\013\022\014\016\015\020\017\014\020\017\021\uffff\043" +
    "\024\001\002\000\004\007\125\001\002\000\022\012\uffff" +
    "\013\022\014\016\015\020\017\014\020\017\021\uffff\043" +
    "\024\001\002\000\004\043\uffec\001\002\000\024\012\uffff" +
    "\013\022\014\016\015\020\017\014\020\017\021\uffff\023" +
    "\121\043\024\001\002\000\006\005\111\023\112\001\002" +
    "\000\004\012\110\001\002\000\022\012\uffff\013\022\014" +
    "\016\015\020\017\014\020\017\021\uffff\043\024\001\002" +
    "\000\004\043\030\001\002\000\026\005\031\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea\023\uffea" +
    "\043\uffea\001\002\000\014\007\034\025\042\041\040\043" +
    "\036\045\037\001\002\000\060\006\uffdb\010\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\024" +
    "\uffdb\025\uffdb\026\055\027\054\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb\044" +
    "\uffdb\001\002\000\062\006\uffd7\010\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\043\uffd7\044" +
    "\uffd7\001\002\000\014\007\034\025\042\041\040\043\036" +
    "\045\037\001\002\000\062\006\uffde\010\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\043\uffde" +
    "\044\uffde\001\002\000\064\005\102\006\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\043\uffe3\044\uffe3\001\002\000\062\006\uffe4\010\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\043\uffe4\044\uffe4\001\002\000\012\007\060\025\042\043" +
    "\036\045\037\001\002\000\010\006\050\024\052\025\051" +
    "\001\002\000\004\045\046\001\002\000\062\006\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\044\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\043\uffd9\044\uffd9\001\002\000\014\007\034\025" +
    "\042\041\040\043\036\045\037\001\002\000\062\006\uffd8" +
    "\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\043\uffd8\044\uffd8\001\002\000\062\006\uffe2" +
    "\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\043\uffe2\044\uffe2\001\002\000\014\007\034" +
    "\025\042\041\040\043\036\045\037\001\002\000\024\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\023\uffe9\043\uffe9\001\002\000\014\007\uffef\025\uffef\041" +
    "\uffef\043\uffef\045\uffef\001\002\000\014\007\ufff0\025\ufff0" +
    "\041\ufff0\043\ufff0\045\ufff0\001\002\000\060\006\uffdc\010" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\024\uffdc\025\uffdc\026\055\027\054\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\043\uffdc\044\uffdc\001\002\000\014\007\uffed\025\uffed\041" +
    "\uffed\043\uffed\045\uffed\001\002\000\014\007\uffee\025\uffee" +
    "\041\uffee\043\uffee\045\uffee\001\002\000\014\007\034\025" +
    "\042\041\040\043\036\045\037\001\002\000\062\006\uffda" +
    "\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020" +
    "\uffda\021\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\044" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\043\uffda\044\uffda\001\002\000\014\007\034" +
    "\025\042\041\040\043\036\045\037\001\002\000\062\006" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\043\uffdd\044\uffdd\001\002\000\010\010" +
    "\100\037\077\040\075\001\002\000\032\010\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021\uffd3\037" +
    "\uffd3\040\uffd3\043\uffd3\044\uffd3\001\002\000\052\010\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\024\052\025\051\031\070\032\065\033\072\034\066" +
    "\035\073\036\067\037\uffd5\040\uffd5\043\uffd5\044\uffd5\001" +
    "\002\000\014\007\ufff5\025\ufff5\041\ufff5\043\ufff5\045\ufff5" +
    "\001\002\000\014\007\ufff7\025\ufff7\041\ufff7\043\ufff7\045" +
    "\ufff7\001\002\000\014\007\ufff3\025\ufff3\041\ufff3\043\ufff3" +
    "\045\ufff3\001\002\000\014\007\ufff6\025\ufff6\041\ufff6\043" +
    "\ufff6\045\ufff6\001\002\000\014\007\034\025\042\041\040" +
    "\043\036\045\037\001\002\000\014\007\ufff8\025\ufff8\041" +
    "\ufff8\043\ufff8\045\ufff8\001\002\000\014\007\ufff4\025\ufff4" +
    "\041\ufff4\043\ufff4\045\ufff4\001\002\000\036\010\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\024\052\025\051\037\uffd6\040\uffd6\043\uffd6\044\uffd6\001" +
    "\002\000\014\007\ufff1\025\ufff1\041\ufff1\043\ufff1\045\ufff1" +
    "\001\002\000\014\007\034\025\042\041\040\043\036\045" +
    "\037\001\002\000\014\007\ufff2\025\ufff2\041\ufff2\043\ufff2" +
    "\045\ufff2\001\002\000\062\006\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf" +
    "\044\uffdf\001\002\000\032\010\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\037\uffd4\040\uffd4" +
    "\043\uffd4\044\uffd4\001\002\000\014\007\034\025\042\041" +
    "\040\043\036\045\037\001\002\000\010\006\104\024\052" +
    "\025\051\001\002\000\062\006\uffe1\010\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\043\uffe1" +
    "\044\uffe1\001\002\000\010\010\106\037\077\040\075\001" +
    "\002\000\062\006\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0\001" +
    "\002\000\006\012\ufffc\021\ufffc\001\002\000\004\002\000" +
    "\001\002\000\014\007\034\025\042\041\040\043\036\045" +
    "\037\001\002\000\014\007\034\025\042\041\040\043\036" +
    "\045\037\001\002\000\022\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\043\uffe7\001\002\000\026" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\037\077\040\075\043\uffe5\001\002\000\010\006\116" +
    "\024\052\025\051\001\002\000\004\023\117\001\002\000" +
    "\014\007\034\025\042\041\040\043\036\045\037\001\002" +
    "\000\022\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\043\uffe6\001\002\000\014\007\034\025\042" +
    "\041\040\043\036\045\037\001\002\000\006\012\ufffe\021" +
    "\ufffe\001\002\000\022\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\043\uffe8\001\002\000\006\012" +
    "\ufffd\021\ufffd\001\002\000\014\007\034\025\042\041\040" +
    "\043\036\045\037\001\002\000\010\010\127\037\077\040" +
    "\075\001\002\000\004\011\130\001\002\000\020\012\uffff" +
    "\013\022\014\016\015\020\017\014\020\017\043\024\001" +
    "\002\000\004\012\132\001\002\000\024\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\133\017\uffd2\020\uffd2\021\uffd2\043" +
    "\uffd2\001\002\000\004\011\134\001\002\000\020\012\uffff" +
    "\013\022\014\016\015\020\017\014\020\017\043\024\001" +
    "\002\000\004\012\136\001\002\000\022\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021\uffd1\043\uffd1\001" +
    "\002\000\004\021\140\001\002\000\004\022\141\001\002" +
    "\000\014\007\034\025\042\041\040\043\036\045\037\001" +
    "\002\000\010\037\077\040\075\044\143\001\002\000\022" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\043\uffcf\001\002\000\006\012\ufffb\021\ufffb\001\002" +
    "\000\014\007\034\025\042\041\040\043\036\045\037\001" +
    "\002\000\010\037\077\040\075\044\147\001\002\000\014" +
    "\007\034\025\042\041\040\043\036\045\037\001\002\000" +
    "\010\037\077\040\075\044\151\001\002\000\014\007\034" +
    "\025\042\041\040\043\036\045\037\001\002\000\010\010" +
    "\153\037\077\040\075\001\002\000\004\011\154\001\002" +
    "\000\020\012\uffff\013\022\014\016\015\020\017\014\020" +
    "\017\043\024\001\002\000\004\012\156\001\002\000\022" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\043\uffd0\001\002\000\006\012\ufffa\021\ufffa\001\002" +
    "\000\006\012\ufff9\021\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\024\005\026\006\022\007\020\023" +
    "\014\024\012\025\011\026\025\001\001\000\022\003\157" +
    "\005\026\006\022\007\020\023\014\024\012\025\011\026" +
    "\025\001\001\000\022\003\156\005\026\006\022\007\020" +
    "\023\014\024\012\025\011\026\025\001\001\000\002\001" +
    "\001\000\022\003\143\005\026\006\022\007\020\023\014" +
    "\024\012\025\011\026\025\001\001\000\002\001\001\000" +
    "\022\003\136\005\026\006\022\007\020\023\014\024\012" +
    "\025\011\026\025\001\001\000\002\001\001\000\022\003" +
    "\123\005\026\006\022\007\020\023\014\024\012\025\011" +
    "\026\025\001\001\000\002\001\001\000\022\003\121\005" +
    "\026\006\022\007\020\023\014\024\012\025\011\026\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\106\005\026\006\022\007\020\023\014\024\012\025\011" +
    "\026\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\040\011\032\014\042\015\031\016\034\001\001" +
    "\000\004\013\055\001\001\000\002\001\001\000\020\004" +
    "\063\011\032\014\042\015\031\016\034\021\104\022\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\060\001\001\000\004\012\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\044\016" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\032\014\042\015\052\016\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\032\014\056\016\034\001\001\000\002\001\001\000\020" +
    "\004\063\011\032\014\042\015\031\016\034\021\061\022" +
    "\062\001\001\000\002\001\001\000\004\020\075\001\001" +
    "\000\002\001\001\000\006\012\046\017\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\073\011\032\014\042\015\031\016" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\046\001\001\000\002\001\001\000\016\004\063\011" +
    "\032\014\042\015\031\016\034\022\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\102\011\032\014\042\015\031\016\034\001\001\000\004" +
    "\012\046\001\001\000\002\001\001\000\004\020\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\114\011\032\014\042\015\031\016\034\001" +
    "\001\000\022\004\063\010\112\011\032\014\042\015\031" +
    "\016\034\021\113\022\062\001\001\000\002\001\001\000" +
    "\004\020\075\001\001\000\004\012\046\001\001\000\002" +
    "\001\001\000\022\004\063\010\117\011\032\014\042\015" +
    "\031\016\034\021\113\022\062\001\001\000\002\001\001" +
    "\000\022\004\063\010\122\011\032\014\042\015\031\016" +
    "\034\021\113\022\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\063\011\032\014" +
    "\042\015\031\016\034\021\125\022\062\001\001\000\004" +
    "\020\075\001\001\000\002\001\001\000\022\003\130\005" +
    "\026\006\022\007\020\023\014\024\012\025\011\026\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\134\005\026\006\022\007\020\023\014" +
    "\024\012\025\011\026\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\063\011\032\014\042\015\031\016\034\021\141\022" +
    "\062\001\001\000\004\020\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\063\011\032\014\042\015" +
    "\031\016\034\021\145\022\062\001\001\000\004\020\075" +
    "\001\001\000\020\004\063\011\032\014\042\015\031\016" +
    "\034\021\147\022\062\001\001\000\004\020\075\001\001" +
    "\000\020\004\063\011\032\014\042\015\031\016\034\021" +
    "\151\022\062\001\001\000\004\020\075\001\001\000\002" +
    "\001\001\000\022\003\154\005\026\006\022\007\020\023" +
    "\014\024\012\025\011\026\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLO_REPITA_HASTA_QUE ::= Repita SEGMENTO Hasta Que OPERACION_LOGICA Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_REPITA_HASTA_QUE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CICLO_PARA ::= Para Parentesis_a OPERACION_LOGICA Punto_coma OPERACION_LOGICA Punto_coma OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONAL_SI ::= Si Parentesis_a OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c Sino Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONAL_SI ::= Si Parentesis_a OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION_LOGICA ::= OPERACION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACION_LOGICA ::= OPERACION_LOGICA OPERADOR_LOGICO OPERACION_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_LOGICA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION_RELACIONAL ::= OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION_RELACIONAL ::= OPERACION_ARITMETICA OPERADOR_RELACIONAL OPERACION_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION_MOD ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION_MOD ::= OPERACION_MOD Modulo FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_MOD",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TERM ::= OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TERM ::= TERM OPERADOR_MULT OPERACION_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION_ARITMETICA ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA OPERADOR_SUMA TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTOR ::= Negacion_logica ELEMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FACTOR ::= ELEMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FACTOR ::= Negacion_logica Parentesis_a OPERACION_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FACTOR ::= Parentesis_a OPERACION_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELEMENTO ::= Identificador Corchete_a OPERACION_ARITMETICA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMENTO ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACION ::= OPERACION_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AS_VARIABLE ::= Identificador Corchete_a OPERACION_ARITMETICA Corchete_c Asignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AS_VARIABLE ::= Identificador Asignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AS_VARIABLE ::= DEFINICION_VARIABLE Asignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICION_VARIABLE ::= TIPO_VARIABLE Identificador Corchete_a OPERACION_ARITMETICA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFINICION_VARIABLE ::= TIPO_VARIABLE Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFINICION_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_VARIABLE ::= Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_VARIABLE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERADOR_MULT ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_MULT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADOR_MULT ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_MULT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADOR_SUMA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_SUMA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERADOR_SUMA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_SUMA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERADOR_LOGICO ::= O_logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERADOR_LOGICO ::= Y_logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERADOR_RELACIONAL ::= Diferencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERADOR_RELACIONAL ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERADOR_RELACIONAL ::= Menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERADOR_RELACIONAL ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERADOR_RELACIONAL ::= Mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERADOR_RELACIONAL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEGMENTO ::= CICLO_REPITA_HASTA_QUE SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SEGMENTO ::= CICLO_PARA SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SEGMENTO ::= CONDICIONAL_SI SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SEGMENTO ::= FUNCION SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SEGMENTO ::= AS_VARIABLE SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SEGMENTO ::= DEFINICION_VARIABLE SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SEGMENTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Programa Parentesis_a Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

