
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 05 20:39:58 CEST 2019
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 05 20:39:58 CEST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\010\000\002\006" +
    "\002\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\013\003\000\002\013\003\000\002\015\004\000\002" +
    "\015\007\000\002\016\005\000\002\016\005\000\002\016" +
    "\010\000\002\017\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\004\000\002\025\006\000\002\020\005\000" +
    "\002\020\006\000\002\020\003\000\002\020\004\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\007\005\000\002\007\003\000\002\024\005" +
    "\000\002\024\003\000\002\023\005\000\002\023\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\041\005\000\002\041\003" +
    "\000\002\030\005\000\002\030\003\000\002\042\011\000" +
    "\002\042\015\000\002\043\015\000\002\044\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\004\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\010\010\001\002\000\004\011\011\001\002\000" +
    "\020\012\uffff\013\023\014\017\015\022\017\015\020\020" +
    "\043\025\001\002\000\024\012\uffff\013\023\014\017\015" +
    "\022\017\015\020\020\021\uffff\023\156\043\025\001\002" +
    "\000\022\012\uffff\013\023\014\017\015\022\017\015\020" +
    "\020\021\uffff\043\025\001\002\000\022\012\uffff\013\023" +
    "\014\017\015\022\017\015\020\020\021\uffff\043\025\001" +
    "\002\000\004\007\142\001\002\000\022\012\uffff\013\023" +
    "\014\017\015\022\017\015\020\020\021\uffff\043\025\001" +
    "\002\000\004\043\ufff7\001\002\000\020\013\023\014\017" +
    "\015\022\017\015\020\020\021\uffff\043\025\001\002\000" +
    "\004\043\130\001\002\000\004\007\116\001\002\000\004" +
    "\043\ufff8\001\002\000\022\012\uffff\013\023\014\017\015" +
    "\022\017\015\020\020\021\uffff\043\025\001\002\000\006" +
    "\005\032\023\033\001\002\000\004\012\031\001\002\000" +
    "\022\012\uffff\013\023\014\017\015\022\017\015\020\020" +
    "\021\uffff\043\025\001\002\000\006\012\ufffc\021\ufffc\001" +
    "\002\000\004\002\000\001\002\000\014\007\040\025\047" +
    "\041\044\043\042\045\043\001\002\000\014\007\040\025" +
    "\047\041\044\043\042\045\043\001\002\000\032\010\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\037\uffd3\040\uffd3\043\uffd3\044\uffd3\001\002\000\060" +
    "\006\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\024\uffe3\025\uffe3\026\065\027\064" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\043\uffe3\044\uffe3\001\002\000\022\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021\ufff3\043" +
    "\ufff3\001\002\000\062\006\uffdf\010\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\043\uffdf\044" +
    "\uffdf\001\002\000\014\007\040\025\047\041\044\043\042" +
    "\045\043\001\002\000\062\006\uffea\010\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\017\uffea\020\uffea\021\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\043\uffea" +
    "\044\uffea\001\002\000\064\005\104\006\uffef\010\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\043\uffef\044\uffef\001\002\000\062\006\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\043\ufff0\044\ufff0\001\002\000\012\007\100\025\047\043" +
    "\042\045\043\001\002\000\062\006\uffe1\010\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\070\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\043" +
    "\uffe1\044\uffe1\001\002\000\026\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\037\076\040\074\043" +
    "\ufff1\001\002\000\004\045\073\001\002\000\052\010\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\024\057\025\062\031\054\032\051\033\060\034\052" +
    "\035\061\036\053\037\uffd5\040\uffd5\043\uffd5\044\uffd5\001" +
    "\002\000\014\007\uffdb\025\uffdb\041\uffdb\043\uffdb\045\uffdb" +
    "\001\002\000\014\007\uffdd\025\uffdd\041\uffdd\043\uffdd\045" +
    "\uffdd\001\002\000\014\007\uffd9\025\uffd9\041\uffd9\043\uffd9" +
    "\045\uffd9\001\002\000\014\007\uffdc\025\uffdc\041\uffdc\043" +
    "\uffdc\045\uffdc\001\002\000\014\007\040\025\047\041\044" +
    "\043\042\045\043\001\002\000\014\007\040\025\047\041" +
    "\044\043\042\045\043\001\002\000\014\007\uffe8\025\uffe8" +
    "\041\uffe8\043\uffe8\045\uffe8\001\002\000\014\007\uffde\025" +
    "\uffde\041\uffde\043\uffde\045\uffde\001\002\000\014\007\uffda" +
    "\025\uffda\041\uffda\043\uffda\045\uffda\001\002\000\014\007" +
    "\uffe7\025\uffe7\041\uffe7\043\uffe7\045\uffe7\001\002\000\060" +
    "\006\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\024\uffe4\025\uffe4\026\065\027\064" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\043\uffe4\044\uffe4\001\002\000\014\007\uffe5" +
    "\025\uffe5\041\uffe5\043\uffe5\045\uffe5\001\002\000\014\007" +
    "\uffe6\025\uffe6\041\uffe6\043\uffe6\045\uffe6\001\002\000\014" +
    "\007\040\025\047\041\044\043\042\045\043\001\002\000" +
    "\062\006\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\070\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\043\uffe2\044\uffe2\001\002\000" +
    "\014\007\040\025\047\041\044\043\042\045\043\001\002" +
    "\000\062\006\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0\044\uffe0\001\002" +
    "\000\036\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\024\057\025\062\037\uffd6\040\uffd6" +
    "\043\uffd6\044\uffd6\001\002\000\062\006\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\043\uffee\044\uffee\001\002\000\014\007\uffd7\025\uffd7\041" +
    "\uffd7\043\uffd7\045\uffd7\001\002\000\014\007\040\025\047" +
    "\041\044\043\042\045\043\001\002\000\014\007\uffd8\025" +
    "\uffd8\041\uffd8\043\uffd8\045\uffd8\001\002\000\032\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4\001\002\000\014" +
    "\007\040\025\047\041\044\043\042\045\043\001\002\000" +
    "\062\006\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\043\uffe9\044\uffe9\001\002\000" +
    "\010\010\103\037\076\040\074\001\002\000\062\006\uffeb" +
    "\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\043\uffeb\044\uffeb\001\002\000\014\007\040" +
    "\025\047\041\044\043\042\045\043\001\002\000\010\006" +
    "\106\024\057\025\062\001\002\000\062\006\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\043\uffed\044\uffed\001\002\000\010\010\110\037\076" +
    "\040\074\001\002\000\062\006\uffec\010\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\043\uffec" +
    "\044\uffec\001\002\000\010\006\112\024\057\025\062\001" +
    "\002\000\004\023\113\001\002\000\014\007\040\025\047" +
    "\041\044\043\042\045\043\001\002\000\022\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\043\ufff2" +
    "\001\002\000\006\012\ufffd\021\ufffd\001\002\000\014\007" +
    "\040\025\047\041\044\043\042\045\043\001\002\000\010" +
    "\010\120\037\076\040\074\001\002\000\004\011\121\001" +
    "\002\000\020\012\uffff\013\023\014\017\015\022\017\015" +
    "\020\020\043\025\001\002\000\004\012\123\001\002\000" +
    "\024\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\124\017\uffd2" +
    "\020\uffd2\021\uffd2\043\uffd2\001\002\000\004\011\125\001" +
    "\002\000\020\012\uffff\013\023\014\017\015\022\017\015" +
    "\020\020\043\025\001\002\000\004\012\127\001\002\000" +
    "\022\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\043\uffd1\001\002\000\026\005\131\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6" +
    "\043\ufff6\001\002\000\014\007\040\025\047\041\044\043" +
    "\042\045\043\001\002\000\010\006\133\024\057\025\062" +
    "\001\002\000\024\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\023\ufff5\043\ufff5\001\002\000\004" +
    "\021\135\001\002\000\004\022\136\001\002\000\014\007" +
    "\040\025\047\041\044\043\042\045\043\001\002\000\010" +
    "\037\076\040\074\044\140\001\002\000\022\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\020\uffcf\021\uffcf\043\uffcf" +
    "\001\002\000\006\012\ufffb\021\ufffb\001\002\000\014\007" +
    "\040\025\047\041\044\043\042\045\043\001\002\000\010" +
    "\037\076\040\074\044\144\001\002\000\014\007\040\025" +
    "\047\041\044\043\042\045\043\001\002\000\010\037\076" +
    "\040\074\044\146\001\002\000\014\007\040\025\047\041" +
    "\044\043\042\045\043\001\002\000\010\010\150\037\076" +
    "\040\074\001\002\000\004\011\151\001\002\000\020\012" +
    "\uffff\013\023\014\017\015\022\017\015\020\020\043\025" +
    "\001\002\000\004\012\153\001\002\000\022\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\043\uffd0" +
    "\001\002\000\006\012\ufffa\021\ufffa\001\002\000\006\012" +
    "\ufff9\021\ufff9\001\002\000\014\007\040\025\047\041\044" +
    "\043\042\045\043\001\002\000\006\012\ufffe\021\ufffe\001" +
    "\002\000\022\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\043\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\025\013\020\015\011\016\023\042" +
    "\015\043\013\044\012\045\026\001\001\000\022\006\156" +
    "\013\020\015\011\016\023\042\015\043\013\044\012\045" +
    "\026\001\001\000\022\006\154\013\020\015\011\016\023" +
    "\042\015\043\013\044\012\045\026\001\001\000\022\006" +
    "\153\013\020\015\011\016\023\042\015\043\013\044\012" +
    "\045\026\001\001\000\002\001\001\000\022\006\140\013" +
    "\020\015\011\016\023\042\015\043\013\044\012\045\026" +
    "\001\001\000\002\001\001\000\022\006\133\013\020\015" +
    "\011\016\023\042\015\043\013\044\012\045\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\114\013\020\015\011\016\023\042\015\043\013" +
    "\044\012\045\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\027\013\020\015\011\016\023\042\015" +
    "\043\013\044\012\045\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\110\020\036\023\044\024\034" +
    "\025\040\001\001\000\022\007\047\017\035\020\036\023" +
    "\044\024\034\025\040\030\045\041\033\001\001\000\002" +
    "\001\001\000\004\022\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\047\020\036\023\044\024\034" +
    "\025\040\030\106\041\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\100\001\001" +
    "\000\002\001\001\000\004\027\074\001\001\000\002\001" +
    "\001\000\006\021\055\026\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\071\020\036\023\044\024\034\025\040\001\001" +
    "\000\012\020\036\023\044\024\062\025\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\036\023\066\025\040\001\001" +
    "\000\002\001\001\000\006\020\070\025\040\001\001\000" +
    "\002\001\001\000\004\021\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\047\020\036\023\044\024" +
    "\034\025\040\041\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\047\020\036\023\044\024\034\025" +
    "\040\030\101\041\033\001\001\000\002\001\001\000\004" +
    "\027\074\001\001\000\002\001\001\000\014\007\104\020" +
    "\036\023\044\024\034\025\040\001\001\000\004\021\055" +
    "\001\001\000\002\001\001\000\004\027\074\001\001\000" +
    "\002\001\001\000\004\021\055\001\001\000\002\001\001" +
    "\000\022\007\047\017\113\020\036\023\044\024\034\025" +
    "\040\030\045\041\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\047\020\036\023\044\024\034\025" +
    "\040\030\116\041\033\001\001\000\004\027\074\001\001" +
    "\000\002\001\001\000\022\006\121\013\020\015\011\016" +
    "\023\042\015\043\013\044\012\045\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\125\013\020\015\011\016\023\042\015\043\013\044\012" +
    "\045\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\131\020\036\023\044\024\034" +
    "\025\040\001\001\000\004\021\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\047" +
    "\020\036\023\044\024\034\025\040\030\136\041\033\001" +
    "\001\000\004\027\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\047\020\036\023\044\024\034\025" +
    "\040\030\142\041\033\001\001\000\004\027\074\001\001" +
    "\000\020\007\047\020\036\023\044\024\034\025\040\030" +
    "\144\041\033\001\001\000\004\027\074\001\001\000\020" +
    "\007\047\020\036\023\044\024\034\025\040\030\146\041" +
    "\033\001\001\000\004\027\074\001\001\000\002\001\001" +
    "\000\022\006\151\013\020\015\011\016\023\042\015\043" +
    "\013\044\012\045\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\047\017\157\020\036\023\044\024\034\025\040\030\045" +
    "\041\033\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CICLO_REPITA_HASTA_QUE ::= Repita SEGMENTO Hasta Que OP_LOGICA Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_REPITA_HASTA_QUE",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CICLO_PARA ::= Para Parentesis_a OP_LOGICA Punto_coma OP_LOGICA Punto_coma OP_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO_PARA",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDICIONAL_SI ::= Si Parentesis_a OP_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c Sino Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONAL_SI ::= Si Parentesis_a OP_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL_SI",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_LOGICA ::= OP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_LOGICA ::= OP_LOGICA OPERADOR_LOGICO OP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP2 ::= OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP2",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP2 ::= OP_ARITMETICA OPERADOR_RELACIONAL OP_ARITMETICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP2",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADOR_LOGICO ::= O_logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADOR_LOGICO ::= Y_logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_RELACIONAL ::= Diferencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADOR_RELACIONAL ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADOR_RELACIONAL ::= Menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADOR_RELACIONAL ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERADOR_RELACIONAL ::= Mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADOR_RELACIONAL ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_MOD ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_MOD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_MOD ::= OP_MOD Modulo FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_MOD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TERM ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TERM ::= TERM OPERADOR_MULT OP_MOD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP_ARITMETICA ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP_ARITMETICA ::= OP_ARITMETICA OPERADOR_SUMA TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERADOR_MULT ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_MULT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERADOR_MULT ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_MULT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERADOR_SUMA ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_SUMA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERADOR_SUMA ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_SUMA",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FACTOR ::= Negacion_logica ELEMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FACTOR ::= ELEMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FACTOR ::= Negacion_logica Parentesis_a OP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FACTOR ::= Parentesis_a OP_LOGICA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO ::= Identificador Corchete_a OP_ARITMETICA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO ::= Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACION ::= OP_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AS_VARIABLE ::= Identificador Corchete_a OP_ARITMETICA Corchete_c Asignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AS_VARIABLE ::= Identificador Asignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AS_VARIABLE ::= DE_VARIABLE Asignacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AS_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DE_VARIABLE ::= TI_VARIABLE Identificador Corchete_a OP_ARITMETICA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DE_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DE_VARIABLE ::= TI_VARIABLE Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DE_VARIABLE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TI_VARIABLE ::= Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TI_VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TI_VARIABLE ::= Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TI_VARIABLE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEGMENTO ::= CICLO_REPITA_HASTA_QUE SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SEGMENTO ::= CICLO_PARA SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SEGMENTO ::= CONDICIONAL_SI SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SEGMENTO ::= FUNCION SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SEGMENTO ::= AS_VARIABLE SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SEGMENTO ::= DE_VARIABLE SEGMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SEGMENTO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SEGMENTO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Programa Parentesis_a Parentesis_c Llave_a SEGMENTO Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

