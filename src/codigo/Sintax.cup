package codigo;

import java_cup.runtime.Symbol;
import arbol.*;

parser code
{:
    private Symbol s;
    private NodoBase nodoBase=null;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    
    public NodoBase getNodoBase(){
        return nodoBase;
    }

    public void setNodoBase(NodoBase nodoBase){
        this.nodoBase = nodoBase;
    }
:};


terminal 

    /* Programa Principal */
    Programa, 

    /* Bloques */
    Corchete_a,Corchete_c,
    Parentesis_a,Parentesis_c,
    Llave_a,Llave_c,

    /* Tipo de Datos */
    Entero,Logico,

    /* Instrucciones Condicionales */
    Si,Sino,

    /* Instrucciones de Control */
    Para,Repita,Hasta,Que,

    /* Operación de Asignación */
    Asignacion,

    /* Operaciónes Aritmeticas */
    Suma,Resta,
    Multiplicacion,
    Division,
    Modulo,

    /* Operaciónes Relacionales */
    Menor,Menor_igual,
    Mayor,Mayor_igual,
    Igual,Diferencia,
    
    /* Operaciónes Logicas */
    Y_logico,O_logico,
    Negacion_logica,
    
    /* Otros */
    Linea,Identificador, Punto_coma,
    Numero,
    ERROR;

non terminal 
        INICIO,
        SEGMENTO,
        SENTENCIA,
        OPERACION_ARITMETICA,
        TIPO_VARIABLE,
        DEFINICION_VARIABLE,
        AS_VARIABLE,
        OPERACION,
        FACTOR,
        OPERADOR_SUMA,
        OPERADOR_MULT,
        OPERACION_MOD,
        TERM,
        ELEMENTO,
        OPERADOR_RELACIONAL,
        OPERADOR_LOGICO,
        OPERACION_LOGICA,
        OPERACION_RELACIONAL,
        CONDICIONAL_SI,
        CICLO_PARA,
        CICLO_REPITA_HASTA_QUE,
        FUNCION;

start with INICIO;

INICIO ::= Programa Parentesis_a Parentesis_c Llave_a SEGMENTO:seg Llave_c {:
    NodoPrograma nodo = new NodoPrograma((NodoBase) seg);
    this.parser.setNodoBase(nodo); 
:};

SEGMENTO ::= | SEGMENTO:seg SENTENCIA:sent {:
    NodoBase hijo = (NodoBase) seg;
    if(hijo !=null){
        while(!hijo.withoutHermanoD()){
            hijo = hijo.getHermanoD();
        }
        hijo.setHermanoD((NodoBase) sent);
        RESULT=seg;
    }else{
        RESULT=sent;
    }
:};

SENTENCIA ::= 
        DEFINICION_VARIABLE:def {: RESULT=def; :}
        | AS_VARIABLE:asig {: RESULT=asig; :}
        | FUNCION:func {: RESULT=func; :}  
        | CONDICIONAL_SI:si {: RESULT=si; :}
        | CICLO_PARA:para {: RESULT=para; :}
        | CICLO_REPITA_HASTA_QUE:rep {: RESULT=rep; :};

OPERADOR_RELACIONAL ::= Mayor:mayor {: RESULT=Tokens.Mayor; :} 
                        | Mayor_igual:mayor_i {: RESULT=Tokens.Mayor_igual; :} 
                        | Menor:menor {: RESULT=Tokens.Menor; :} 
                        | Menor_igual:menor_i {: RESULT=Tokens.Menor_igual; :} 
                        | Igual:igual {: RESULT=Tokens.Igual; :} 
                        | Diferencia:dif {: RESULT=Tokens.Diferencia; :};

OPERADOR_LOGICO ::= Y_logico:y_log {: RESULT=Tokens.Y_logico; :}
                    | O_logico:o_log {: RESULT=Tokens.O_logico; :};

OPERADOR_SUMA ::= Suma:sum {: RESULT=Tokens.Suma; :} 
                | Resta:rest {: RESULT=Tokens.Resta; :};

OPERADOR_MULT ::= Multiplicacion:mult {: RESULT=Tokens.Multiplicacion; :} 
                | Division:div {: RESULT=Tokens.Division; :};

TIPO_VARIABLE ::= Entero:entero {: RESULT=TiposIds.entero; :}
            | Logico:logico {: RESULT=TiposIds.logico; :};

DEFINICION_VARIABLE ::= TIPO_VARIABLE:tipo Identificador:id {: RESULT= new NodoDefinicion(id.toString(), (TiposIds) tipo); :}
              | TIPO_VARIABLE:tipo Identificador:id Corchete_a OPERACION_ARITMETICA:oper Corchete_c {: RESULT= new NodoDefinicion(id.toString(), (TiposIds) tipo, (NodoBase) oper); :};

AS_VARIABLE ::= DEFINICION_VARIABLE:def Asignacion OPERACION:asig {:
                    NodoAsignacion nodo = new NodoAsignacion(((NodoDefinicion)def).getIdentificador(), (NodoBase) asig);
                    ((NodoDefinicion)def).setHermanoD(nodo);
                    RESULT= (NodoDefinicion)def;
                :}
                | Identificador:id Asignacion OPERACION:asig {: RESULT= new NodoAsignacion(id.toString(), (NodoBase) asig); :}
                | Identificador:id Corchete_a OPERACION_ARITMETICA:indice Corchete_c Asignacion OPERACION:asig {: RESULT= new NodoAsignacion(id.toString(), (NodoBase) asig, (NodoBase) indice); :};

FUNCION ::= Identificador:id Parentesis_a OPERACION:parm Parentesis_c {: RESULT = new NodoFuncion(id.toString(), (NodoBase) parm); :}
        | Identificador:id Parentesis_a Parentesis_c {: RESULT = new NodoFuncion(id.toString()); :};

OPERACION ::= OPERACION_LOGICA:oper {: RESULT=oper; :};

ELEMENTO ::= Numero:num {: RESULT= new NodoNumero(num.toString()); :} 
            | Identificador:id {: RESULT= new NodoIdentificador(id.toString()); :}   
            | Resta Numero:num {: RESULT= new NodoNumero("-" + num.toString()); :}   
            | Identificador:id Corchete_a OPERACION_ARITMETICA:op Corchete_c {: RESULT= new NodoIdentificador(id.toString(), (NodoBase) op); :};

FACTOR ::= Parentesis_a OPERACION_LOGICA:oper Parentesis_c {: RESULT= oper; :}  
        | Negacion_logica Parentesis_a OPERACION_LOGICA:operD Parentesis_c  {: RESULT= new NodoOperacion(Tokens.Negacion_logica, (NodoBase) operD, TiposIds.logico); :} 
        | ELEMENTO:elem {: RESULT= elem; :}  
        | Negacion_logica ELEMENTO:operD {: RESULT= new NodoOperacion(Tokens.Negacion_logica, (NodoBase) operD, TiposIds.logico); :};
        
OPERACION_ARITMETICA ::= OPERACION_ARITMETICA:operI OPERADOR_SUMA:op TERM:operD {: RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.entero); :}
                    | TERM:term {: RESULT= term; :};

TERM ::= TERM:operI OPERADOR_MULT:op OPERACION_MOD:operD {: RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.entero); :}
        | OPERACION_MOD:mod {: RESULT= mod; :};

OPERACION_MOD ::= OPERACION_MOD:operI Modulo:op FACTOR:operD {: RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.entero); :}
                | FACTOR:fact {: RESULT= fact; :} ;

OPERACION_RELACIONAL ::= OPERACION_ARITMETICA:operI  OPERADOR_RELACIONAL:op OPERACION_ARITMETICA:operD {: RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.logico); :}
                | OPERACION_ARITMETICA:oper {: RESULT= oper; :};

OPERACION_LOGICA ::= OPERACION_LOGICA:operI OPERADOR_LOGICO:op OPERACION_RELACIONAL:operD {: RESULT= new NodoOperacion((NodoBase) operI, (Tokens) op, (NodoBase) operD, TiposIds.logico); :}  
                | OPERACION_RELACIONAL:oper {: RESULT= oper; :};


CONDICIONAL_SI ::= Si Parentesis_a OPERACION_LOGICA:cond Parentesis_c Llave_a SEGMENTO:seg Llave_c {:RESULT = new NodoSi((NodoBase) cond,(NodoBase) seg);:}
                   | Si Parentesis_a OPERACION_LOGICA:cond Parentesis_c Llave_a SEGMENTO:seg Llave_c Sino Llave_a SEGMENTO:segSiNo Llave_c {:RESULT = new NodoSi((NodoBase) cond,(NodoBase) seg,(NodoBase) segSiNo);:};

CICLO_PARA ::= Para Parentesis_a SEGMENTO:inic Punto_coma SEGMENTO:paso Punto_coma OPERACION_LOGICA:verif Parentesis_c Llave_a SEGMENTO:seg Llave_c {: RESULT= new NodoPara((NodoBase) inic, (NodoBase) paso, (NodoBase) verif, (NodoBase) seg); :};

CICLO_REPITA_HASTA_QUE ::= Repita SEGMENTO:seg Hasta Que OPERACION_LOGICA:cond Punto_coma {:RESULT = new NodoRepita((NodoBase) cond, (NodoBase) seg);:};
