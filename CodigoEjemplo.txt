package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};


terminal 

    /* Programa Principal */
    Programa, 

    /* Bloques */
    Corchete_a,Corchete_c,
    Parentesis_a,Parentesis_c,
    Llave_a,Llave_c,

    /* Tipo de Datos */
    Entero,Logico,

    /* Instrucciones Condicionales */
    Si,Sino,

    /* Instrucciones de Control */
    Para,Repita,Hasta,Que,

    /* Operación de Asignación */
    Asignacion,

    /* Operaciónes Aritmeticas */
    Suma,Resta,
    Multiplicacion,
    Division,
    Modulo,

    /* Operaciónes Relacionales */
    Menor,Menor_igual,
    Mayor,Mayor_igual,
    Igual,Diferencia,
    
    /* Operaciónes Logicas */
    Y_logico,O_logico,
    Negacion_logica,
    
    /* Otros */
    Linea,Identificador, Punto_coma,
    Numero,
    ERROR;

non terminal 
        INICIO,
        SEGMENTO,
        OPERACION_ARITMETICA,
        TIPO_VARIABLE,
        DEFINICION_VARIABLE,
        AS_VARIABLE,
        OPERACION,
        FACTOR,
        OPERADOR_SUMA,
        OPERADOR_MULT,
        OPERACION_MOD,
        TERM,
        ELEMENTO,
        OPERADOR_RELACIONAL,
        OPERADOR_LOGICO,
        OPERACION_LOGICA,
        OPERACION_RELACIONAL,
        CONDICIONAL_SI,
        CICLO_PARA,
        CICLO_REPITA_HASTA_QUE,
        FUNCION;

start with INICIO;

INICIO ::= Programa Parentesis_a Parentesis_c Llave_a SEGMENTO Llave_c;
SEGMENTO ::= 
        | DEFINICION_VARIABLE SEGMENTO
        | AS_VARIABLE SEGMENTO
        | FUNCION SEGMENTO
        | CONDICIONAL_SI SEGMENTO
        | CICLO_PARA SEGMENTO
        | CICLO_REPITA_HASTA_QUE SEGMENTO;

OPERADOR_RELACIONAL ::= Mayor |
                        Mayor_igual |
                        Menor |
                        Menor_igual |
                        Igual |
                        Diferencia;

OPERADOR_LOGICO ::= Y_logico |
                    O_logico;

OPERADOR_SUMA ::= Suma | Resta;
OPERADOR_MULT ::= Multiplicacion | Division;

TIPO_VARIABLE ::= Entero | Logico;
DEFINICION_VARIABLE ::= TIPO_VARIABLE Identificador 
              | TIPO_VARIABLE Identificador Corchete_a OPERACION_ARITMETICA Corchete_c;
AS_VARIABLE ::= DEFINICION_VARIABLE Asignacion OPERACION |
                Identificador Asignacion OPERACION |
                Identificador Corchete_a OPERACION_ARITMETICA Corchete_c Asignacion OPERACION;



OPERACION ::= OPERACION_LOGICA;
ELEMENTO ::= Numero | 
            Identificador | 
            Resta Numero | 
            Identificador Corchete_a OPERACION_ARITMETICA Corchete_c;

FACTOR ::= Parentesis_a OPERACION_LOGICA Parentesis_c | 
        Negacion_logica Parentesis_a OPERACION_LOGICA Parentesis_c | 
        ELEMENTO | 
        Negacion_logica ELEMENTO ;
        
OPERACION_ARITMETICA ::= OPERACION_ARITMETICA OPERADOR_SUMA TERM | TERM;
TERM ::= TERM OPERADOR_MULT OPERACION_MOD | OPERACION_MOD;
OPERACION_MOD ::= OPERACION_MOD Modulo FACTOR | FACTOR;

OPERACION_RELACIONAL ::= OPERACION_ARITMETICA  OPERADOR_RELACIONAL OPERACION_ARITMETICA | OPERACION_ARITMETICA;
OPERACION_LOGICA ::= OPERACION_LOGICA OPERADOR_LOGICO OPERACION_RELACIONAL | OPERACION_RELACIONAL;


CONDICIONAL_SI ::= Si Parentesis_a OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c 
                   | Si Parentesis_a OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c Sino Llave_a SEGMENTO Llave_c;

CICLO_PARA ::= Para Parentesis_a OPERACION_LOGICA Punto_coma OPERACION_LOGICA Punto_coma OPERACION_LOGICA Parentesis_c Llave_a SEGMENTO Llave_c;
CICLO_REPITA_HASTA_QUE ::= Repita SEGMENTO Hasta Que OPERACION_LOGICA Punto_coma;